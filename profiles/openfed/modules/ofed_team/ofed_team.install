<?php

/**
 * Implements hook_install().
 */
function ofed_team_install() {
  // Include ds settings.
  $file = drupal_get_path('module', 'ofed_team') . '/install/_ofed_team.ds.inc';
  if (file_exists($file)) {
    // Include it.
    include_once 'install/_ofed_team.ds.inc';

    // Install ds customs fields.
    if (function_exists('ofed_team_ds_custom_fields_info')) {
      $fields = ofed_team_ds_custom_fields_info();
      foreach ($fields as $id => $field) {
        // Remove one key.
        if (isset($field->api_version)) {
          unset($field->api_version);
        }
        // Serialize the entities.
        $field->entities = serialize($field->entities);
        // Serialize the ui_limit.
        $field->ui_limit = serialize($field->ui_limit);
        // Serialize the properties.
        $field->properties = serialize($field->properties);

        // Cast variable like an array.
        $field = (array) $field;

        // Save in database.
        db_insert('ds_fields')->fields($field)->execute();
      }
    }

    // Install ds fields settings.
    if (function_exists('ofed_team_ds_field_settings_info')) {
      $fields = ofed_team_ds_field_settings_info();
      foreach ($fields as $id => $field) {
        // Remove one key.
        if (isset($field->api_version)) {
          unset($field->api_version);
        }
        // Serialize the settings.
        $field->settings = serialize($field->settings);

        // Cast variable like an array.
        $field = (array) $field;

        // Save in database.
        db_insert('ds_field_settings')->fields($field)->execute();
      }
    }

    // Install ds layouts settings.
    if (function_exists('ofed_team_ds_layout_settings_info')) {
      $layouts = ofed_team_ds_layout_settings_info();
      foreach ($layouts as $id => $layout) {
        // Remove one key.
        if (isset($layout->api_version)) {
          unset($layout->api_version);
        }
        // Serialize the settings.
        $layout->settings = serialize($layout->settings);

        // Cast variable like an array.
        $layout = (array) $layout;

        // Save in database.
        db_insert('ds_layout_settings')->fields($layout)->execute();
      }
    }
  }

  // Paths alias management.
  $path_source = 'team-members';
  // Set path alias whitelist.
  $path_alias_whitelist = variable_get('path_alias_whitelist', array());
  if (!array_key_exists($path_source, $path_alias_whitelist)) {
    $path_alias_whitelist[$path_source] = TRUE;
    variable_set('path_alias_whitelist', $path_alias_whitelist);
  }

  // Set path alias for each languages.
  $languages = language_list('enabled');
  foreach ($languages as $language) {
    // FR.
    if (isset($language['fr'])) {
      $path = array(
        'source' => $path_source,
        'alias' => 'collegues',
        'language' => 'fr',
      );
      db_insert('url_alias')->fields($path)->execute();
    }

    // NL.
    if (isset($language['nl'])) {
      $path = array(
        'source' => $path_source,
        'alias' => 'collegas',
        'language' => 'nl',
      );
      db_insert('url_alias')->fields($path)->execute();
    }

    // DE.
    if (isset($language['de'])) {
      $path = array(
        'source' => $path_source,
        'alias' => 'team-mitglieder',
        'language' => 'de',
      );
      db_insert('url_alias')->fields($path)->execute();
    }
  }

  // Install Taxonomy vocabulary
  $vocabularies = array(
    'ofed_team_civility' => array(
      'name' => 'Team members civility',
      'machine_name' => 'ofed_team_civility',
      'description' => '',
      'hierarchy' => '0',
      'module' => 'taxonomy',
      'weight' => '0',
      'language' => 'und',
      'i18n_mode' => '4',
    ),
    'ofed_team_gender' => array(
      'name' => 'Team members gender',
      'machine_name' => 'ofed_team_gender',
      'description' => '',
      'hierarchy' => '0',
      'module' => 'taxonomy',
      'weight' => '0',
      'language' => 'und',
      'i18n_mode' => '4',
    ),
  );

  // Install taxonomy terms...
  $existing = taxonomy_get_vocabularies();

  foreach ($vocabularies as $vocabulary) {
    $vocabulary = (object) $vocabulary;

    foreach ($existing as $existing_vocab) {

      if ($existing_vocab->machine_name === $vocabulary->machine_name) {
        $vocabulary->vid = $existing_vocab->vid;
      }
    }
    taxonomy_vocabulary_save($vocabulary);
  }
  // build terms array
  $civilities = array(
    'en' => array('Mrs.', 'Ms.', 'Mr.'),
    'fr' => array('Madame', 'Mademoiselle', 'Monsieur'),
    'nl' => array('Mevrouw', 'Jufrouw', 'Meneer'),
  );
  $genders = array(
    'en' => array('Women', 'Men'),
    'fr' => array('Femme', 'Homme'),
    'nl' => array('Vrouw', 'Man'),
  );

  $civility_vocabulary = taxonomy_vocabulary_machine_name_load('ofed_team_civility');
  $gender_vocabulary = taxonomy_vocabulary_machine_name_load('ofed_team_gender');

  // get enabled languages
  $languages = language_list();

  foreach ($languages as $language) {
    $lang = empty($language->prefix) ? $language->language : $language->prefix;

    if (!empty($civilities[$lang])) {
      _ofed_team_taxonomy_term_save($civilities[$lang], $civility_vocabulary->vid, $lang);
    }

    if (!empty($gender[$lang])) {
      _ofed_team_taxonomy_term_save($genders[$lang], $gender_vocabulary->vid, $lang);
    }
  }
}

/**
 * Taxonomy terms save multiple value at once.
 * @param type $terms
 * @param type $vid
 * @param type $lang
 * @param type $update
 */
function _ofed_team_taxonomy_term_save($terms, $vid, $lang, $update = FALSE) {
  $existing_terms = array();

  if ($update) {
    $existing_terms = taxonomy_get_tree($vid);
    $existing_terms = array_map('_ofed_team_get_existing_term_names', $existing_terms);
  }

  $weight = 0;
  foreach ($terms as $term) {
    if (!$update || !in_array($term, $existing_terms)) {
      $new_term = new stdClass();
      $new_term->name = $term;
      $new_term->vid = $vid;
      $new_term->language = $lang;
      $new_term->weight = $weight;
      taxonomy_term_save($new_term);
      $weight++;
    }
  }
}


/**
 * Add content type to path alias whitelist.
 */
function ofed_team_update_7100() {
  $module = db_select('system', 's')
    ->fields('s')
    ->condition('name', 'ofed_feature_team')
    ->execute()
    ->fetchObject();

  if (!empty($module) && $module->schema_version < 7100) {
    // Add newest alias.
    $path_source = 'team-members';
    // Set path alias whitelist.
    $path_alias_whitelist = variable_get('path_alias_whitelist', array());
    if (!array_key_exists($path_source, $path_alias_whitelist)) {
      $path_alias_whitelist[$path_source] = TRUE;
      variable_set('path_alias_whitelist', $path_alias_whitelist);
    }
  }
}

/**
 * Disable unused view modes.
 */
function ofed_team_update_7101() {
  $module = db_select('system', 's')
    ->fields('s')
    ->condition('name', 'ofed_feature_team')
    ->execute()
    ->fetchObject();

  if (!empty($module) && $module->schema_version < 7101) {
    // Set the bundle name.
    $bundle = 'ofed_team';
    // Set what display will be removed.
    $displays_to_delete = array('search_index', 'block_info');

    // Delete display suite layout settings.
    foreach ($displays_to_delete as $display_to_delete) {
      db_delete('ds_layout_settings')->condition('id', 'node|' . $bundle . '|' . $display_to_delete)->execute();
    }
    // Delete display suite field settings.
    foreach ($displays_to_delete as $display_to_delete) {
      db_delete('ds_field_settings')->condition('id', 'node|' . $bundle . '|' . $display_to_delete)->execute();
    }

    // Update field instance.
    // Get field config instance for each field used by the content type.
    // Select each field instance for this bundle.
    $fields = db_select('field_config_instance', 'fci')->fields('fci')->condition('bundle', $bundle)->execute()->fetchAll();
    foreach ($fields as $field) {
      // Get data.
      $data = unserialize($field->data);
      // Remove displays.
      foreach ($displays_to_delete as $display_to_delete) {
        if (isset($data['display'][$display_to_delete])) {
          unset($data['display'][$display_to_delete]);
        }
      }
      // Set data.
      $field->data = serialize($data);
      // Update record.
      db_update('field_config_instance')->fields(array('data' => $field->data))->condition('id', $field->id)->execute();
    }

    // Update bundle settings variable.
    // Get variable content.
    $bundle_settings_node = variable_get('field_bundle_settings_node__' . $bundle, array());
    if (!empty($bundle_settings_node)) {
      // Disable displays.
      foreach ($displays_to_delete as $display_to_delete) {
        if (isset($bundle_settings_node['view_modes'][$display_to_delete])) {
          if ($display_to_delete == 'block_info') {
            unset($bundle_settings_node['view_modes'][$display_to_delete]);
            if (isset($bundle_settings_node['extra_fields']['display']['language'][$display_to_delete])) {
              unset($bundle_settings_node['extra_fields']['display']['language'][$display_to_delete]);
            }
          }
          else {
            $bundle_settings_node['view_modes'][$display_to_delete] = array('custom_settings' => FALSE);
          }
        }
      }
      // Set variable content.
      variable_set('field_bundle_settings_node__' . $bundle, $bundle_settings_node);
    }
  }
}

/**
 * Create the missing paths alias for german language.
 */
function ofed_team_update_7102() {
  $module = db_select('system', 's')
    ->fields('s')
    ->condition('name', 'ofed_feature_team')
    ->execute()
    ->fetchObject();

  if (!empty($module) && $module->schema_version < 7102) {
    // Paths alias management.
    $path_source = 'team-members';
    // Set path alias whitelist.
    $path_alias_whitelist = variable_get('path_alias_whitelist', array());
    if (!array_key_exists($path_source, $path_alias_whitelist)) {
      $path_alias_whitelist[$path_source] = TRUE;
      variable_set('path_alias_whitelist', $path_alias_whitelist);
    }

    // Set path alias for german language.
    $languages = language_list('enabled');
    if (isset($languages['de']) && !drupal_lookup_path('alias', $path_source, 'de')) {
      $path = array(
        'source'   => $path_source,
        'alias'    => 'team-mitglieder',
        'language' => 'de',
      );
      db_insert('url_alias')->fields($path)->execute();
    }
  }
}
