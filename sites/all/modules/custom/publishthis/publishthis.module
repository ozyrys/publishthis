<?php

/**
 * Implementation of hook_init
 */
function publishthis_init() {
  global $pt_settings_value;
  global $pt_client_info;
 
  if( $cache = cache_get('pt_client_info') ) {
    $pt_client_info = $cache->data;
    if( time() - $cache->expire > 0 ) {
      cache_clear_all($cache->cid, 'cache');
      $pt_client_info = reset_client_info();
    }
  }
  else {
    $pt_client_info = reset_client_info();
  }
  // Create a taxonomy field and use the taxonomy entity we created earlier
  // Add the field to the content type as a HTML select box.


  // Include common settings file
  include drupal_get_path('module', 'publishthis') . '/publishthis-settings.php';
  // css uses to manage fields style


  if(!empty($pt_settings_value['styling']['enable_styling'])){
    drupal_add_css(drupal_get_path('module', 'publishthis') . '/assets/css/publishthis.general.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }


  if(isset($pt_settings_value['endpoint']) && !empty($pt_settings_value['endpoint'])){
    $pt_endpoint  = $pt_settings_value['endpoint'];
  }
  else{
    $pt_endpoint = 'pt_endpoint';
  }
  $query_params = drupal_get_query_parameters(null, array());
  if( count($query_params) == 1 && $query_params['q']== $pt_endpoint) {
    _init_pt_endpoint();
    exit;
  }

  // common js
  drupal_add_js(drupal_get_path('module', 'publishthis') . '/assets/js/publishthis.js');
  //Add Tweeter widget js
  drupal_add_js( 'http://platform.twitter.com/widgets.js' );
}

/**
 * Implements hook_theme().
 */
function publishthis_theme() {
  return array(
    'publishthis_addnew_publishingactions' => array(
      'render element' => 'form',
    ),
    'edit_publishthis_publishing_actions' => array(
      'render element' => 'form',
    ),
  );
}

function publishthis_preprocess_html(&$variables) {
  // Add conditional stylesheets for admin pages on admin theme.
  if (arg(0)=="admin") {
    // reference your current admin theme
    drupal_add_css(drupal_get_path('module', 'publishthis') . '/assets/css/publishthis.admin.css');
  }
}

/**
 * Get tid from term name
 *
 * @retrun tid taxonomy
 */
function _get_tid_from_term_name($term_name, $vocabulary) {
  $arr_terms = taxonomy_get_term_by_name($term_name, $vocabulary);
  if (!empty($arr_terms)) {
    $arr_terms = array_values($arr_terms);
    $tid = $arr_terms[0]->tid;
  }
  else {
    $vobj = taxonomy_vocabulary_machine_name_load($vocabulary);
    $term = new stdClass();
    $term->name = $term_name;
    $term->vid = $vobj->vid;
    taxonomy_term_save($term);
    $tid = $term->tid;
  }
  return $tid;
}

function reset_client_info() {
  $objApi = new Publishthis_API();
  $pt_client_info = $objApi->get_client_info();
  //set cache for 2 minutes
  $cache_time = '+2 minutes';
  $expire = strtotime($cache_time, time());
  cache_set('pt_client_info', $pt_client_info, 'cache', $expire );
  return $pt_client_info;
}

/**
 * Publishthis permissions
 * Implementation of hook_permission
 */
function publishthis_permission() {
  return array(
    'administer publishthis module' => array(
      'title' => t('Administer publishThis module'),
      'description' => t('Allow users to access publishThis settings page'),
    ),
  );
}

/**
 * Publishthis menu items
 * Implementation of hook_menu
 */
function publishthis_menu() {

  $items = array();

  $items['admin/config/system/publishthis/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );
  
  $items['admin/config/system/publishthis'] = array(
    'title' => 'PublishThis',
    'description' => 'Configure PublishThis Curation Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_settings'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.settings.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );

  $items['admin/config/system/publishthis/publishing-actions'] = array(
    'title' => 'Publishing Actions',
    'type' => MENU_LOCAL_TASK,
    'page callback' => array('publishthis_publishingactions'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin'
  );  
    
  $items['admin/config/system/publishthis/publishing-addactions'] = array(
    'title' => 'PublishThis',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('publishthis_addnew_publishingactions'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['admin/config/system/publishthis/publishing-editactions/%'] = array(
    'title' => 'Publishing Actions',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_publishthis_publishing_actions'),
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['publishthis/publishing-actions/delete/%'] = array(
    'title' => 'Publishing Actions Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'delete_publishthis_publishing_actions',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.publishingactions.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['admin/config/system/publishthis/log-messages'] = array(
    'title' => 'Publishing Log',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'publishthis_log_messages',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
    'weight' => 10
  );
  
  $items['publishthis/log-messages/delete/%'] = array(
    'title' => 'Log Messages Delete',
    'type' => MENU_CALLBACK,
    'page callback' => 'publishthis_log_messages_delete',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  $items['publishthis/log-messages/export/%'] = array(
    'title' => 'Export Log Messages',
    'type' => MENU_CALLBACK,
    'page callback' => 'publishthis_log_messages_export',
    'access callback' => 'publishthis_administer_access',
    'access arguments' => array('administer'),
    'file' => 'publishthis.admin.logmessages.inc',
    'file path' => drupal_get_path('module', 'publishthis') . '/admin',
  );
  
  return $items;
}

/**
 * Add administer publishThis access callback
 */
function publishthis_administer_access($op){

  switch ($op) {
    case 'administer':
      // Return true, if one of these permissions is granted
      if (user_access('administer site configuration') || user_access('administer publishthis module')) {
        return TRUE;
      }
      break;
  }
  return FALSE; // default

}

/**
 * Generate random endpoint
 */
function getRandomWord($len = 10) {
  $word = array_merge(range('a', 'z'), range('A', 'Z'));
  shuffle($word);
  return substr(implode($word), 0, $len);
}

/**
* Delete docid when node is deleted
*/
function publishthis_node_delete($node) {
  db_delete('pt_docid_links')->condition('nid', $node->nid)->execute();
}

/**
* Process CMS endpoint request
*/
function _init_pt_endpoint() {
  $objEndpoint = new Publishthis_Endpoint();
  $objEndpoint->process_request();
}

/**
* Hook to display custom styles and Publishthis logo when node is rendering
*/
function publishthis_node_view($node, $view_mode, $langcode) {
  global $pt_settings_value;
  $objUtils = new Publishthis_Utils();

  if( $pt_settings_value['curatedby'] == 'page' ) {
    $result = db_select('pt_docid_links', 'dl')
      ->fields('dl', array('docId','nid'))
      ->condition('dl.nid', $node->nid, '=')
      ->range(0,1)    
      ->execute()
      ->fetchAssoc();
    if( $result ) {
      $node->content['additional-text'] = array(
         '#markup' => $objUtils->getCuratedByLogo(),
         '#weight' => 100
      );
    }    
  }

  //render Publishthis custom css
  $css = $objUtils->display_css(false);
  drupal_add_css($css, 'inline');
}